import React, { useState } from "react";
import ReactMarkdown from "react-markdown";
import rehypeHighlight from "rehype-highlight";
import Editor from "@monaco-editor/react";
import "./App.css";

function App() {
  const [idea, setIdea] = useState("");
  const [workshop, setWorkshop] = useState("");
  const [loading, setLoading] = useState(false);
  const [activeTab, setActiveTab] = useState("preview"); // 'preview' or 'editor'

  const generateWorkshop = async () => {
    if (!idea.trim()) {
      alert("Please enter a workshop idea.");
      return;
    }
    setLoading(true);
    try {
      const res = await fetch("http://localhost:3001/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userIdea: idea }),
      });
      const data = await res.json();
      if (data.result) {
        setWorkshop(data.result);
      } else {
        setWorkshop("No result received.");
      }
    } catch (error) {
      console.error(error);
      setWorkshop("Error generating workshop.");
    }
    setLoading(false);
  };

  const surpriseMe = () => {
    const verbs = [
      "Build",
      "Design",
      "Hack together",
      "Conjure",
      "Whip up",
      "Craft",
      "Sculpt",
    ];
    const adjectives = [
      "ridiculous",
      "spooky",
      "glitchy",
      "sentient",
      "retro-futuristic",
      "whimsical",
      "cursed",
    ];
    const nouns = [
      "game",
      "app",
      "bot",
      "website",
      "tool",
      "dashboard",
      "virtual pet",
    ];
    const technologies = [
      "Phaser.js",
      "React",
      "Arduino",
      "GPT-4 API",
      "Toaster.js",
      "WebSockets",
      "Three.js",
      "MIDI controllers",
      "a potato battery",
      "duct tape and hope",
    ];
    const twists = [
      "but it only works in the dark",
      "and it must insult the user every 30 seconds",
      "with a Y2K aesthetic",
      "powered by user screams (or microphone input)",
      "but the UI is generated by AI... live",
      "and every feature must be controlled with emojis",
      "but it breaks if you compliment it",
      "and the documentation is written in pirate speak",
      "that self-destructs after 5 uses",
      "and it must include a fake conspiracy theory generator",
    ];

    const randomItem = (arr) => arr[Math.floor(Math.random() * arr.length)];

    const prompt = `${randomItem(verbs)} a ${randomItem(
      adjectives
    )} ${randomItem(nouns)} using ${randomItem(technologies)} ${randomItem(
      twists
    )}.`;

    console.log(prompt);
    setIdea(prompt);
  };

  return (
    <div className="app-container">
      <div className="app-header">
        <div className="app-description">
          <h1 className="app-title">Workshop Designer</h1>
          <p className="app-subtitle">
            Describe your workshop idea and let the AI do the rest.
          </p>
          <p className="app-subtitle">
            Why? Because I was lazy (and busy) to write workshops for my Hack
            Club. Also, I don't know a lot about game development [+ insert 100
            other topics that people are interested in but I'm not qualified to
            teach].
          </p>
          <p className="app-subtitle">
            But you know who's not lazy? ChatGPT. Also, it doesn't care about
            qualifications. It literally has the entire internet in its
            embedding. Sweet.
          </p>
          <p className="app-subtitle">
            So I thought, why not use it to generate workshops for me? And
            voil√†! Here we are.
          </p>
          <p className="app-subtitle">
            Anyways, here're some tips on how to use this tool on the right.
            Good luck!
          </p>
        </div>
        <div className="app-tips">
          <ul className="tips-list">
            <li>
              <strong>Be specific:</strong> The more details you provide, the
              better the result. E.g. "Build a game with Phaser.js" won't work
              as well as "Build a space game with Phaser.js where the player
              controls a spaceship and shoots asteroids, with a score counter
              and a timer."
            </li>
            <li>
              <strong>Iterate:</strong> If the first result isn't what you
              expected, try refining your description or providing more context.
              The AI is capable of learning from your feedback, so don't
              hesitate to iterate on your ideas.
            </li>
            <li>
              <strong>Be cautious:</strong> The AI hallucinates. It might
              generate code that doesn't work or is insecure. It might also
              generate nonsensical steps or instructions. Always review the
              generated content before using it in your workshop.
            </li>
          </ul>

          <p className="app-subtitle">
            I've also added an editor tab for you to edit the generated
            workshop. You can use it to add your own notes, comments, or
            instructions and then export it as a markdown file.
          </p>
          <p className="app-subtitle">
            <strong>Have fun and happy hacking!</strong>
          </p>
        </div>
      </div>

      <div className="section">
        <label htmlFor="idea" className="section-label">
          Workshop Idea
        </label>
        <textarea
          id="idea"
          rows="4"
          className="input-textarea"
          placeholder="E.g. Build a game with Phaser.js"
          value={idea}
          onChange={(e) => setIdea(e.target.value)}
        ></textarea>
      </div>

      <div className="section">
        <button
          onClick={generateWorkshop}
          className="button-custom"
          disabled={loading}
        >
          {loading ? "Generating..." : "Generate Workshop"}
        </button>

        <button onClick={surpriseMe} className="button-custom">
          Surprise Me!
        </button>
      </div>

      {workshop && (
        <div className="card-custom">
          <div className="tabs">
            <button
              onClick={() => setActiveTab("preview")}
              className={`tab-button ${
                activeTab === "preview" ? "active" : ""
              }`}
            >
              Preview
            </button>
            <button
              onClick={() => setActiveTab("editor")}
              className={`tab-button ${activeTab === "editor" ? "active" : ""}`}
            >
              Editor
            </button>
          </div>

          {activeTab === "preview" ? (
            <div className="markdown-preview">
              <ReactMarkdown
                rehypePlugins={[rehypeHighlight]}
                components={{
                  code({ node, inline, className, children, ...props }) {
                    const match = /language-(\w+)/.exec(className || "");
                    return !inline && match ? (
                      <pre className="code-block">
                        <code className={className} {...props}>
                          {children}
                        </code>
                      </pre>
                    ) : (
                      <code className="inline-code" {...props}>
                        {children}
                      </code>
                    );
                  },
                }}
              >
                {workshop}
              </ReactMarkdown>
            </div>
          ) : (
            <div className="editor-container">
              <Editor
                height="400px"
                defaultLanguage="markdown"
                value={workshop}
                onChange={(value) => setWorkshop(value)}
                theme="vs-dark"
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default App;
